name: Expo Build Android

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Creamos dos jobs separados para ejecutar los builds en paralelo
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repository
        uses: actions/checkout@v4

      # Caché avanzada de Node.js
      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Caché de node_modules
      - name: 💾 Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Caché de la configuración de Java
      - name: 🏗 Setup Java for Android builds
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      # Caché extendida de Gradle
      - name: 💾 Cache Gradle files
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            android/.gradle
            android/app/.gradle
            android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Caché para Metro bundler
      - name: 💾 Cache Metro bundler
        uses: actions/cache@v3
        with:
          path: |
            **/metro-cache
            ~/.metro
            ${{ github.workspace }}/.expo
          key: ${{ runner.os }}-metro-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      # Instalar dependencias solo si no hay caché
      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      # Caché para EAS CLI y Expo
      - name: 💾 Cache EAS CLI
        uses: actions/cache@v3
        with:
          path: |
            ~/.eas-cli
            ~/.expo
            .expo
          key: ${{ runner.os }}-eas-expo-${{ hashFiles('**/eas.json', '**/app.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-expo-

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          expo-cache: true

      - name: 🔐 Verify EAS authentication
        run: npx eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Build APK locally
        run: npx eas build --platform android --profile production --local --non-interactive --output=./build-output.apk
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build-output.apk
          if-no-files-found: error

  build-aab:
    name: Build AAB
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repository
        uses: actions/checkout@v4

      # Caché avanzada de Node.js
      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Caché de node_modules
      - name: 💾 Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Caché de la configuración de Java
      - name: 🏗 Setup Java for Android builds
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      # Caché extendida de Gradle
      - name: 💾 Cache Gradle files
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            android/.gradle
            android/app/.gradle
            android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Caché para Metro bundler
      - name: 💾 Cache Metro bundler
        uses: actions/cache@v3
        with:
          path: |
            **/metro-cache
            ~/.metro
            ${{ github.workspace }}/.expo
          key: ${{ runner.os }}-metro-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-metro-

      # Instalar dependencias solo si no hay caché
      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      # Caché para EAS CLI y Expo
      - name: 💾 Cache EAS CLI
        uses: actions/cache@v3
        with:
          path: |
            ~/.eas-cli
            ~/.expo
            .expo
          key: ${{ runner.os }}-eas-expo-${{ hashFiles('**/eas.json', '**/app.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-expo-

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          expo-cache: true

      - name: 🔐 Verify EAS authentication
        run: npx eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Modificar eas.json para AAB
        run: |
          jq '.build.production.android.buildType = "app-bundle"' eas.json > temp.json && mv temp.json eas.json
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Build AAB locally
        run: npx eas build --platform android --profile production --local --non-interactive --output=./build-output.aab
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build-output.aab
          if-no-files-found: error

  # Job final que depende de los dos builds y muestra un resumen
  summary:
    name: Build Summary
    needs: [build-apk, build-aab]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Build Summary
        run: echo "✅ Los builds de APK y AAB se han completado correctamente y se han subido como artifacts de GitHub Actions."
