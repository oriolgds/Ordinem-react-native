name: Expo Build Android

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Definimos una configuración común que se reutilizará en ambos jobs
jobs:
  # Job para construir el APK
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: 💾 Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: 🏗 Setup Java for Android builds
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: 💾 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: 💾 Cache EAS CLI
        uses: actions/cache@v3
        with:
          path: ~/.eas-cli
          key: ${{ runner.os }}-eas-cli-${{ hashFiles('**/eas.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-cli-

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🔐 Verify EAS authentication
        run: npx eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Build APK locally
        run: npx eas build --platform android --profile production --local
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📂 Locate APK build output
        id: find-apk
        run: |
          APK_PATH=$(find ./build -name "*.apk" | head -n 1)
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "APK encontrado en: $APK_PATH"

      - name: 📦 Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ env.APK_PATH }}
          if-no-files-found: error

  # Job para construir el AAB
  build-aab:
    name: Build AAB
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: 💾 Cache node_modules
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - name: 🏗 Setup Java for Android builds
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: 💾 Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: 💾 Cache EAS CLI
        uses: actions/cache@v3
        with:
          path: ~/.eas-cli
          key: ${{ runner.os }}-eas-cli-${{ hashFiles('**/eas.json') }}
          restore-keys: |
            ${{ runner.os }}-eas-cli-

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🔐 Verify EAS authentication
        run: npx eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Modificar eas.json para AAB
        run: |
          jq '.build.production.android.buildType = "app-bundle"' eas.json > temp.json && mv temp.json eas.json
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🚀 Build AAB locally
        run: npx eas build --platform android --profile production --local
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📂 Locate AAB build output
        id: find-aab
        run: |
          AAB_PATH=$(find ./build -name "*.aab" | head -n 1)
          echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
          echo "AAB encontrado en: $AAB_PATH"

      - name: 📦 Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: ${{ env.AAB_PATH }}
          if-no-files-found: error

  # Job final que depende de los dos anteriores y muestra un resumen
  summary:
    name: Build Summary
    needs: [build-apk, build-aab]
    runs-on: ubuntu-latest
    steps:
      - name: 📋 Build Summary
        run: echo "✅ Los builds de APK y AAB se han completado correctamente y se han subido como artifacts de GitHub Actions."
